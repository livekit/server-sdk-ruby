# Code generated by protoc-gen-twirp_ruby 1.0.0, DO NOT EDIT.
# source: livekit_room.proto

require "json"
require "net/https"
require "google/protobuf"

module Livekit
  class Error < StandardError; end

  class ServiceError < Error
    attr_reader :code
    attr_reader :meta
    attr_reader :message

    def initialize(response)
      error = JSON.parse(response.body)

      @code    = error["code"]
      @meta    = error["meta"] || {}
      @message = error["msg"]
    end
  end

  CreateRoomRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.CreateRoomRequest").msgclass
  ListRoomsRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.ListRoomsRequest").msgclass
  ListRoomsResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.ListRoomsResponse").msgclass
  DeleteRoomRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.DeleteRoomRequest").msgclass
  DeleteRoomResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.DeleteRoomResponse").msgclass
  ListParticipantsRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.ListParticipantsRequest").msgclass
  ListParticipantsResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.ListParticipantsResponse").msgclass
  RoomParticipantIdentity ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.RoomParticipantIdentity").msgclass
  RemoveParticipantResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.RemoveParticipantResponse").msgclass
  MuteRoomTrackRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.MuteRoomTrackRequest").msgclass
  MuteRoomTrackResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.MuteRoomTrackResponse").msgclass
  UpdateParticipantRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.UpdateParticipantRequest").msgclass
  UpdateSubscriptionsRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.UpdateSubscriptionsRequest").msgclass
  UpdateSubscriptionsResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.UpdateSubscriptionsResponse").msgclass
  SendDataRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.SendDataRequest").msgclass
  SendDataResponse ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.SendDataResponse").msgclass
  UpdateRoomMetadataRequest ||= ::Google::Protobuf::DescriptorPool.generated_pool.lookup("livekit.UpdateRoomMetadataRequest").msgclass
  

  
  class RoomServiceClient
    attr_reader :service_name

    def initialize(server)
      @server       = URI.parse(server)
      @service_name = "livekit.RoomService"
    end

    
    def create_room(create_room_request)
      body = create_room_request.to_proto
      resp = make_request(body, "#{service_name}/CreateRoom")

      Room.decode(resp.body)
    end
    
    def list_rooms(list_rooms_request)
      body = list_rooms_request.to_proto
      resp = make_request(body, "#{service_name}/ListRooms")

      ListRoomsResponse.decode(resp.body)
    end
    
    def delete_room(delete_room_request)
      body = delete_room_request.to_proto
      resp = make_request(body, "#{service_name}/DeleteRoom")

      DeleteRoomResponse.decode(resp.body)
    end
    
    def list_participants(list_participants_request)
      body = list_participants_request.to_proto
      resp = make_request(body, "#{service_name}/ListParticipants")

      ListParticipantsResponse.decode(resp.body)
    end
    
    def get_participant(room_participant_identity)
      body = room_participant_identity.to_proto
      resp = make_request(body, "#{service_name}/GetParticipant")

      ParticipantInfo.decode(resp.body)
    end
    
    def remove_participant(room_participant_identity)
      body = room_participant_identity.to_proto
      resp = make_request(body, "#{service_name}/RemoveParticipant")

      RemoveParticipantResponse.decode(resp.body)
    end
    
    def mute_published_track(mute_room_track_request)
      body = mute_room_track_request.to_proto
      resp = make_request(body, "#{service_name}/MutePublishedTrack")

      MuteRoomTrackResponse.decode(resp.body)
    end
    
    def update_participant(update_participant_request)
      body = update_participant_request.to_proto
      resp = make_request(body, "#{service_name}/UpdateParticipant")

      ParticipantInfo.decode(resp.body)
    end
    
    def update_subscriptions(update_subscriptions_request)
      body = update_subscriptions_request.to_proto
      resp = make_request(body, "#{service_name}/UpdateSubscriptions")

      UpdateSubscriptionsResponse.decode(resp.body)
    end
    
    def send_data(send_data_request)
      body = send_data_request.to_proto
      resp = make_request(body, "#{service_name}/SendData")

      SendDataResponse.decode(resp.body)
    end
    
    def update_room_metadata(update_room_metadata_request)
      body = update_room_metadata_request.to_proto
      resp = make_request(body, "#{service_name}/UpdateRoomMetadata")

      Room.decode(resp.body)
    end
    

    def make_request(body, path)
      options = {
        use_ssl: @server.scheme == "https",
      }

      Net::HTTP.start(@server.host, @server.port, options) do |http|
        path    = "/twirp/#{path}"
        request = Net::HTTP::Post.new(path)
        request.body = body

        request["User-Agent"]   = user_agent
        request["Content-Type"] = "application/protobuf"

        # Authenticate with Basic Auth if a username or password was provided.
        if @server.user || @server.password
          request.basic_auth(url.user, url.password)
        end

        response = http.request(request)

        if !response.is_a?(Net::HTTPSuccess)
          raise ServiceError.new(response)
        end

        response
      end
    end

    def user_agent
      "#{RUBY_ENGINE}/#{RUBY_VERSION}; #{RUBY_PLATFORM}; v1.0.0"
    end
  end
  
end
